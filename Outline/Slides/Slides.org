#+TITLE: Math with Computers
:PREAMBLE:
#+OPTIONS: broken-links:auto todo:nil H:9
#+STARTUP: content
#+OPTIONS: tags:not-in-toc d:nil
#+AUTHOR: Ryan Greenup & James Guerra
#+INFOJS_OPT: view:showall toc:3
#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
#+OPTIONS: tex:t
# #+TODO: TODO IN-PROGRESS WAITING DONE
#+CATEGORY: TAD
:END:
:HTML:
#+INFOJS_OPT: view:info toc:3
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="style.css">
# #+CSL_STYLE: /home/ryan/Templates/CSL/nature.csl
:END:
:R:
#+PROPERTY: header-args:R :session TADMain :dir ./ :cache yes :eval never-export :exports both
# exports: both (or code or whatever)
# results: table (or output or whatever)
:END:
:LATEX:
#+LATEX_HEADER: \IfFileExists{../resources/style.sty}{\usepackage{../resources/style}}{}
#+LATEX_HEADER: \IfFileExists{../resources/referencing.sty}{\usepackage{../resources/referencing}}{}
#+LATEX_HEADER: \addbibresource{./bibtex-refs.bib}
:END:
* TODO Fibonacci Sequence
** TODO Computational Approach
   :PROPERTIES:
   :CUSTOM_ID: define-the-fibonacci-numbers
   :END:
The /Fibonacci/ Numbers are given by:

\begin{align}
F_n = F_{n-1} + F_{n-2} \label{eq:fib-def}
\end{align}

** Defining Recursively in Python
#+NAME: fib-rec-0
#+CAPTION: Defining the /Fibonacci Sequence/ using Recursion
#+BEGIN_SRC python
  def rec_fib(k):
      if type(k) is not int:
          Print("Error: Require integer values")
          return 0
      elif k == 0:
          return 0
      elif k <= 2:
          return 1
      return rec_fib(k-1) + rec_fib(k-2)

  start = time.time()
  rec_fib(35)
  print(str(round(time.time() - start, 3)) + "seconds")

## 2.245seconds
#+END_SRC

** Caching to Memory

#+NAME: fib-cache
#+CAPTION: Caching the results of the function previously defined [[time-slow]]
#+BEGIN_SRC python
  from functools import lru_cache

  @lru_cache(maxsize=9999)
  def rec_fib(k):
      if type(k) is not int:
          print("Error: Require Integer Values")
          return 0
      elif k == 0:
          return 0
      elif k <= 2:
          return 1
      return rec_fib(k-1) + rec_fib(k-2)


start = time.time()
rec_fib(35)
print(str(round(time.time() - start, 3)) + "seconds")
new_start = time.time()
rec_fib(6000)
print(str(round(time.time() - new_start, 3)) + "seconds")
## 0.0seconds
## 8.3923e-05seconds
#+END_SRC

** Solving Iteratively

#+NAME: fib-iter
#+CAPTION: Results are substantially faster
#+BEGIN_SRC python
  def my_it_fib(k):
      if k == 0:
          return k
      elif type(k) is not int:
          print("ERROR: Integer Required")
          return 0

      i, n1, n2  = 1, 1, 1

      if k <=2:
          return 1

      while i < k:
         no = n1
         n1 = n2
         n2 = no + n2
         i = i + 1
      return (n1)

  start = time.time()
  my_it_fib(10**6)
  print(str(round(time.time() - start, 9)) + "seconds")

 ## 6.975890398seconds
#+END_SRC

** Solving With Julia is even Faster

#+NAME: julia-fib
#+begin_src julia :results output
function my_it_fib(k)
    if k == 0
        return k
    elseif typeof(k) != Int
        print("ERROR: Integer Required")
        return 0
    end
    # Hence k must be a positive integer

    i  = 1
    n1 = 1
    n2 = 1

    if k <= 2:
        return 1

    while i < k
       no = n1
       n1 = n2
       n2 = no + n2
       i = i + 1
    end
    return (n1)
end

@time my_it_fib(10^6)
    
##  0.000450 seconds
#+end_src

** Exponential Generating Functions
:PROPERTIES:
:CUSTOM_ID: exp-gen-func-fib-seq
:END:
*** Motivation
    :PROPERTIES:
    :CUSTOM_ID: motivation
    :END:

Consider the /Fibonacci Sequence/

\begin{align}
    a_{n+  2} &= a_{n+  1} +  a_n \label{eq:fib-def-shift}
\end{align}

Compare it to the following /differential equation/

\begin{align*}
f''\left( x \right)- f'\left( x \right)- f\left( x \right)=  0
\end{align*}

#+REVEAL: split
Solving this we get:
\begin{align*}
f\left( x \right)= c_1 ⋅ \mathrm{exp}\left[ \left( \frac{1- \sqrt{5} }{2} \right)x \right] + c_2 ⋅ \mathrm{exp}\left[ \left( \frac{1 + \sqrt{5} }{2} \right)x \right] \end{align*}
Now consider:
\begin{alignat}{2}
f \left( x \right) &= ∑_{n= 0}^\infty \left[ a_n ⋅ \frac{x^n}{n!} \right] &= e^x
\end{alignat}

#+REVEAL: split
\begin{align*}
f\left( x \right)&= ∑_{n= 0}^\infty \left[ \left( c_1\left( \frac{1- \sqrt{5} }{2} \right)^n + c_2 ⋅ \left( \frac{1+ \sqrt{5} }{2} \right)^n \right) ⋅ \frac{x^n}{n!} \right]
\end{align*}

By equating the above two equations we deduce that:
\begin{align*}
a_n = c_1⋅ \left( \frac{1- \sqrt{5} }{2} \right)^n + c_2 \left( \frac{1+ \sqrt{5} }{2} \right)
\end{align*}

#+REVEAL: split
Solving $c_1$ and $c_2$ by the initial conditions gives:

\begin{align*}
a_n &= \frac{1}{\sqrt{5} } \left[ \left( \frac{1+ \sqrt{5} }{2} \right)^n - \left( \frac{1- \sqrt{5} }{2} \right)^n \right] \newline
&= \frac{\varphi^n - ψ^n}{\sqrt{5} } \newline
&=\frac{\varphi^n - ψ^n}{\varphi - ψ}
\end{align*}
Where:
$\varphi = \frac{1+ \sqrt{5} }{2} ≈ 1.61\ldots$
$ψ = 1-\varphi = \frac{1- \sqrt{5} }{2} ≈ 0.61\ldots$

** The Golden Ratio $\varphi$
*** Where does it come from?
#+ATTR_REVEAL: :frag (appear)
- $\frac{F_{n+1}}{F_n}$ or $\frac{a}{b} = \frac{a+b}{a}$
- $\sqrt{1+\sqrt{1+\sqrt{1+...}}}$
- $1+\frac{1}{1+\frac{1}{1+\frac{1}{1+...}}}$
*** Why is it so interesting?
#+ATTR_HTML: :height 40%, :width 40%
[[/tmp/Python-Quant/Outline/Slides/Images/golden_ratio.png]]
#+REVEAL: split
[[/tmp/Python-Quant/Outline/Slides/Images/spirals.jpeg]]

** Image References:
Golden Rectangle: https://evstudio.com/functional-schematic-design-trick-use-the-golden-rectangle/

Spirals: https://blog.prototypr.io/golden-ratio-what-it-is-and-why-should-you-use-it-in-design-7c3f43bcf98
